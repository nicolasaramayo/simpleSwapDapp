{"ast":null,"code":"import { ethers } from 'ethers';\n\n// Contract ABIs - Exactamente como los tenías\nexport const SIMPLE_SWAP_ABI = [\"function initialize(address _tokenA, address _tokenB) external\", \"function addLiquidity(address _tokenA, address _tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity)\", \"function removeLiquidity(address _tokenA, address _tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB)\", \"function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external\", \"function getAmountOut(address _tokenIn, address _tokenOut, uint256 amountIn) external view returns (uint256 amountOut)\", \"function getPrice(address _tokenA, address _tokenB) external view returns (uint256 price)\", \"function getReserves() external view returns (uint256 _reserveA, uint256 _reserveB)\", \"function tokenA() external view returns (address)\", \"function tokenB() external view returns (address)\", \"function reserveA() external view returns (uint256)\", \"function reserveB() external view returns (uint256)\", \"function balanceOf(address account) external view returns (uint256)\", \"function totalSupply() external view returns (uint256)\"];\nexport const ERC20_ABI = [\"function name() external view returns (string)\", \"function symbol() external view returns (string)\", \"function decimals() external view returns (uint8)\", \"function totalSupply() external view returns (uint256)\", \"function balanceOf(address account) external view returns (uint256)\", \"function transfer(address to, uint256 amount) external returns (bool)\", \"function allowance(address owner, address spender) external view returns (uint256)\", \"function approve(address spender, uint256 amount) external returns (bool)\", \"function transferFrom(address from, address to, uint256 amount) external returns (bool)\", \"function mint(address to, uint256 amount) external\"];\n\n// Contract addresses - Actualizadas con el deploy\nexport const CONTRACT_ADDRESSES = {\n  // Para localhost/hardhat development\n  localhost: {\n    SimpleSwap: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\",\n    TokenA: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",\n    TokenB: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"\n  },\n  // Para sepolia testnet - ACTUALIZADO CON EL DEPLOY\n  sepolia: {\n    SimpleSwap: \"0x2843159d568Fa5e059Efd49f22e5A26542bfE392\",\n    TokenA: \"0x2dD35434773eB36883408EdDEfe1e5D8B3DC54FF\",\n    TokenB: \"0x22A0aC9E38ce8843961A849C473279EC3c4AA332\"\n  }\n};\n\n// Configuración de red simple\nexport const getNetworkConfig = chainId => {\n  switch (chainId) {\n    case 31337: // Hardhat local\n    case 1337:\n      // Localhost\n      return {\n        name: 'localhost',\n        contracts: CONTRACT_ADDRESSES.localhost\n      };\n    case 11155111:\n      // Sepolia\n      return {\n        name: 'sepolia',\n        contracts: CONTRACT_ADDRESSES.sepolia\n      };\n    default:\n      return {\n        name: 'localhost',\n        contracts: CONTRACT_ADDRESSES.localhost\n      };\n  }\n};\n\n// Funciones helper para conexión con MetaMask\nexport const connectWallet = async () => {\n  if (!window.ethereum) {\n    throw new Error('MetaMask no está instalado. Por favor instálalo para continuar.');\n  }\n  try {\n    // Solicitar conexión a MetaMask\n    await window.ethereum.request({\n      method: 'eth_requestAccounts'\n    });\n\n    // Crear provider y signer\n    const provider = new ethers.BrowserProvider(window.ethereum);\n    const signer = await provider.getSigner();\n    const address = await signer.getAddress();\n    const network = await provider.getNetwork();\n    return {\n      provider,\n      signer,\n      address,\n      chainId: Number(network.chainId)\n    };\n  } catch (error) {\n    throw new Error(`Error conectando wallet: ${error.message}`);\n  }\n};\nexport const switchToLocalNetwork = async () => {\n  if (!window.ethereum) return;\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: '0x7a69'\n      }] // 31337 en hex\n    });\n  } catch (switchError) {\n    // Si la red no existe, la agregamos\n    if (switchError.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0x7a69',\n            chainName: 'Hardhat Local',\n            rpcUrls: ['http://127.0.0.1:8545'],\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            }\n          }]\n        });\n      } catch (addError) {\n        throw new Error('Error agregando red local');\n      }\n    } else {\n      throw new Error('Error cambiando a red local');\n    }\n  }\n};\nexport const switchToSepoliaNetwork = async () => {\n  if (!window.ethereum) return;\n  try {\n    await window.ethereum.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: '0xaa36a7'\n      }] // 11155111 en hex\n    });\n  } catch (switchError) {\n    // Si la red no existe, la agregamos\n    if (switchError.code === 4902) {\n      try {\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: '0xaa36a7',\n            chainName: 'Sepolia Testnet',\n            rpcUrls: ['https://sepolia.infura.io/v3/'],\n            nativeCurrency: {\n              name: 'Sepolia ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            blockExplorerUrls: ['https://sepolia.etherscan.io']\n          }]\n        });\n      } catch (addError) {\n        throw new Error('Error agregando red Sepolia');\n      }\n    } else {\n      throw new Error('Error cambiando a red Sepolia');\n    }\n  }\n};","map":{"version":3,"names":["ethers","SIMPLE_SWAP_ABI","ERC20_ABI","CONTRACT_ADDRESSES","localhost","SimpleSwap","TokenA","TokenB","sepolia","getNetworkConfig","chainId","name","contracts","connectWallet","window","ethereum","Error","request","method","provider","BrowserProvider","signer","getSigner","address","getAddress","network","getNetwork","Number","error","message","switchToLocalNetwork","params","switchError","code","chainName","rpcUrls","nativeCurrency","symbol","decimals","addError","switchToSepoliaNetwork","blockExplorerUrls"],"sources":["C:/Users/Admin/Downloads/Curso-Solidity/frontend-app/src/config/web3.js"],"sourcesContent":["import { ethers } from 'ethers';\r\n\r\n// Contract ABIs - Exactamente como los tenías\r\nexport const SIMPLE_SWAP_ABI = [\r\n  \"function initialize(address _tokenA, address _tokenB) external\",\r\n  \"function addLiquidity(address _tokenA, address _tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB, uint256 liquidity)\",\r\n  \"function removeLiquidity(address _tokenA, address _tokenB, uint256 liquidity, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline) external returns (uint256 amountA, uint256 amountB)\",\r\n  \"function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external\",\r\n  \"function getAmountOut(address _tokenIn, address _tokenOut, uint256 amountIn) external view returns (uint256 amountOut)\",\r\n  \"function getPrice(address _tokenA, address _tokenB) external view returns (uint256 price)\",\r\n  \"function getReserves() external view returns (uint256 _reserveA, uint256 _reserveB)\",\r\n  \"function tokenA() external view returns (address)\",\r\n  \"function tokenB() external view returns (address)\",\r\n  \"function reserveA() external view returns (uint256)\",\r\n  \"function reserveB() external view returns (uint256)\",\r\n  \"function balanceOf(address account) external view returns (uint256)\",\r\n  \"function totalSupply() external view returns (uint256)\"\r\n];\r\n\r\nexport const ERC20_ABI = [\r\n  \"function name() external view returns (string)\",\r\n  \"function symbol() external view returns (string)\",\r\n  \"function decimals() external view returns (uint8)\",\r\n  \"function totalSupply() external view returns (uint256)\",\r\n  \"function balanceOf(address account) external view returns (uint256)\",\r\n  \"function transfer(address to, uint256 amount) external returns (bool)\",\r\n  \"function allowance(address owner, address spender) external view returns (uint256)\",\r\n  \"function approve(address spender, uint256 amount) external returns (bool)\",\r\n  \"function transferFrom(address from, address to, uint256 amount) external returns (bool)\",\r\n  \"function mint(address to, uint256 amount) external\"\r\n];\r\n\r\n// Contract addresses - Actualizadas con el deploy\r\nexport const CONTRACT_ADDRESSES = {\r\n  // Para localhost/hardhat development\r\n  localhost: {\r\n    SimpleSwap: \"0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0\", \r\n    TokenA: \"0x5FbDB2315678afecb367f032d93F642f64180aa3\",    \r\n    TokenB: \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\"     \r\n  },\r\n  // Para sepolia testnet - ACTUALIZADO CON EL DEPLOY\r\n  sepolia: {\r\n    SimpleSwap: \"0x2843159d568Fa5e059Efd49f22e5A26542bfE392\",\r\n    TokenA: \"0x2dD35434773eB36883408EdDEfe1e5D8B3DC54FF\",    \r\n    TokenB: \"0x22A0aC9E38ce8843961A849C473279EC3c4AA332\"     \r\n  }\r\n};\r\n\r\n// Configuración de red simple\r\nexport const getNetworkConfig = (chainId) => {\r\n  switch (chainId) {\r\n    case 31337: // Hardhat local\r\n    case 1337:  // Localhost\r\n      return {\r\n        name: 'localhost',\r\n        contracts: CONTRACT_ADDRESSES.localhost\r\n      };\r\n    case 11155111: // Sepolia\r\n      return {\r\n        name: 'sepolia',\r\n        contracts: CONTRACT_ADDRESSES.sepolia\r\n      };\r\n    default:\r\n      return {\r\n        name: 'localhost',\r\n        contracts: CONTRACT_ADDRESSES.localhost\r\n      };\r\n  }\r\n};\r\n\r\n// Funciones helper para conexión con MetaMask\r\nexport const connectWallet = async () => {\r\n  if (!window.ethereum) {\r\n    throw new Error('MetaMask no está instalado. Por favor instálalo para continuar.');\r\n  }\r\n\r\n  try {\r\n    // Solicitar conexión a MetaMask\r\n    await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    \r\n    // Crear provider y signer\r\n    const provider = new ethers.BrowserProvider(window.ethereum);\r\n    const signer = await provider.getSigner();\r\n    const address = await signer.getAddress();\r\n    const network = await provider.getNetwork();\r\n    \r\n    return {\r\n      provider,\r\n      signer,\r\n      address,\r\n      chainId: Number(network.chainId)\r\n    };\r\n  } catch (error) {\r\n    throw new Error(`Error conectando wallet: ${error.message}`);\r\n  }\r\n};\r\n\r\nexport const switchToLocalNetwork = async () => {\r\n  if (!window.ethereum) return;\r\n\r\n  try {\r\n    await window.ethereum.request({\r\n      method: 'wallet_switchEthereumChain',\r\n      params: [{ chainId: '0x7a69' }], // 31337 en hex\r\n    });\r\n  } catch (switchError) {\r\n    // Si la red no existe, la agregamos\r\n    if (switchError.code === 4902) {\r\n      try {\r\n        await window.ethereum.request({\r\n          method: 'wallet_addEthereumChain',\r\n          params: [{\r\n            chainId: '0x7a69',\r\n            chainName: 'Hardhat Local',\r\n            rpcUrls: ['http://127.0.0.1:8545'],\r\n            nativeCurrency: {\r\n              name: 'ETH',\r\n              symbol: 'ETH',\r\n              decimals: 18\r\n            }\r\n          }]\r\n        });\r\n      } catch (addError) {\r\n        throw new Error('Error agregando red local');\r\n      }\r\n    } else {\r\n      throw new Error('Error cambiando a red local');\r\n    }\r\n  }\r\n};\r\n\r\nexport const switchToSepoliaNetwork = async () => {\r\n  if (!window.ethereum) return;\r\n\r\n  try {\r\n    await window.ethereum.request({\r\n      method: 'wallet_switchEthereumChain',\r\n      params: [{ chainId: '0xaa36a7' }], // 11155111 en hex\r\n    });\r\n  } catch (switchError) {\r\n    // Si la red no existe, la agregamos\r\n    if (switchError.code === 4902) {\r\n      try {\r\n        await window.ethereum.request({\r\n          method: 'wallet_addEthereumChain',\r\n          params: [{\r\n            chainId: '0xaa36a7',\r\n            chainName: 'Sepolia Testnet',\r\n            rpcUrls: ['https://sepolia.infura.io/v3/'],\r\n            nativeCurrency: {\r\n              name: 'Sepolia ETH',\r\n              symbol: 'ETH',\r\n              decimals: 18\r\n            },\r\n            blockExplorerUrls: ['https://sepolia.etherscan.io']\r\n          }]\r\n        });\r\n      } catch (addError) {\r\n        throw new Error('Error agregando red Sepolia');\r\n      }\r\n    } else {\r\n      throw new Error('Error cambiando a red Sepolia');\r\n    }\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}