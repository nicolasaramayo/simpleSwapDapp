{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Downloads\\\\Curso-Solidity\\\\frontend-app\\\\src\\\\context\\\\WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { connectWallet, getNetworkConfig } from '../config/web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet debe ser usado dentro de WalletProvider');\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [isConnected, setIsConnected] = useState(false);\n  const [address, setAddress] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [contracts, setContracts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Función para conectar wallet\n  const connect = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const walletData = await connectWallet();\n      setProvider(walletData.provider);\n      setSigner(walletData.signer);\n      setAddress(walletData.address);\n      setChainId(walletData.chainId);\n      setIsConnected(true);\n\n      // Configurar contratos para la red actual\n      const networkConfig = getNetworkConfig(walletData.chainId);\n      setContracts(networkConfig.contracts);\n    } catch (err) {\n      setError(err.message);\n      console.error('Error conectando wallet:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Función para desconectar wallet\n  const disconnect = () => {\n    setIsConnected(false);\n    setAddress(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setContracts(null);\n    setError(null);\n  };\n\n  // Verificar si ya hay una conexión al cargar\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          const accounts = await window.ethereum.request({\n            method: 'eth_accounts'\n          });\n          if (accounts.length > 0) {\n            await connect();\n          }\n        } catch (err) {\n          console.error('Error verificando conexión:', err);\n        }\n      }\n    };\n    checkConnection();\n  }, []);\n\n  // Escuchar cambios de cuenta y red\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = accounts => {\n        if (accounts.length === 0) {\n          disconnect();\n        } else if (accounts[0] !== address) {\n          connect();\n        }\n      };\n      const handleChainChanged = () => {\n        connect(); // Reconectar para actualizar la red\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, [address]);\n  const value = {\n    // Estado\n    isConnected,\n    address,\n    provider,\n    signer,\n    chainId,\n    contracts,\n    isLoading,\n    error,\n    // Funciones\n    connect,\n    disconnect\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"OXkioAiRZdSwmGSHe1L5QYIfH0I=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","connectWallet","getNetworkConfig","jsxDEV","_jsxDEV","WalletContext","useWallet","_s","context","Error","WalletProvider","children","_s2","isConnected","setIsConnected","address","setAddress","provider","setProvider","signer","setSigner","chainId","setChainId","contracts","setContracts","isLoading","setIsLoading","error","setError","connect","walletData","networkConfig","err","message","console","disconnect","checkConnection","window","ethereum","accounts","request","method","length","handleAccountsChanged","handleChainChanged","on","removeListener","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Downloads/Curso-Solidity/frontend-app/src/context/WalletContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { connectWallet, getNetworkConfig } from '../config/web3';\r\n\r\nconst WalletContext = createContext();\r\n\r\nexport const useWallet = () => {\r\n  const context = useContext(WalletContext);\r\n  if (!context) {\r\n    throw new Error('useWallet debe ser usado dentro de WalletProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [address, setAddress] = useState(null);\r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [contracts, setContracts] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Función para conectar wallet\r\n  const connect = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n      \r\n      const walletData = await connectWallet();\r\n      \r\n      setProvider(walletData.provider);\r\n      setSigner(walletData.signer);\r\n      setAddress(walletData.address);\r\n      setChainId(walletData.chainId);\r\n      setIsConnected(true);\r\n      \r\n      // Configurar contratos para la red actual\r\n      const networkConfig = getNetworkConfig(walletData.chainId);\r\n      setContracts(networkConfig.contracts);\r\n      \r\n    } catch (err) {\r\n      setError(err.message);\r\n      console.error('Error conectando wallet:', err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Función para desconectar wallet\r\n  const disconnect = () => {\r\n    setIsConnected(false);\r\n    setAddress(null);\r\n    setProvider(null);\r\n    setSigner(null);\r\n    setChainId(null);\r\n    setContracts(null);\r\n    setError(null);\r\n  };\r\n\r\n  // Verificar si ya hay una conexión al cargar\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      if (window.ethereum) {\r\n        try {\r\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n          if (accounts.length > 0) {\r\n            await connect();\r\n          }\r\n        } catch (err) {\r\n          console.error('Error verificando conexión:', err);\r\n        }\r\n      }\r\n    };\r\n\r\n    checkConnection();\r\n  }, []);\r\n\r\n  // Escuchar cambios de cuenta y red\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      const handleAccountsChanged = (accounts) => {\r\n        if (accounts.length === 0) {\r\n          disconnect();\r\n        } else if (accounts[0] !== address) {\r\n          connect();\r\n        }\r\n      };\r\n\r\n      const handleChainChanged = () => {\r\n        connect(); // Reconectar para actualizar la red\r\n      };\r\n\r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.on('chainChanged', handleChainChanged);\r\n\r\n      return () => {\r\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n      };\r\n    }\r\n  }, [address]);\r\n\r\n  const value = {\r\n    // Estado\r\n    isConnected,\r\n    address,\r\n    provider,\r\n    signer,\r\n    chainId,\r\n    contracts,\r\n    isLoading,\r\n    error,\r\n    \r\n    // Funciones\r\n    connect,\r\n    disconnect\r\n  };\r\n\r\n  return (\r\n    <WalletContext.Provider value={value}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}